const express = require("express");
const models = require("../models.js");
const jwt = require("jsonwebtoken");
const config = require("../config.js");
const { Op, Sequelize } = require("sequelize");

const router = express.Router();

router.use((req, res, next) => {
  console.log("Time: ", Date.now());
  next();
});

router.delete("/delete/:id", async (req, res) => {
  const userId = req.params.id;

  try {
    const user = await models.User.findByPk(userId);
    const data = await models.Scan.findAll({
      where: { UserId: userId },
    });

    if (!user) {
      return res.status(404).json({ message: "User not found!" });
    }

    if (!data) {
      return res.status(404).json({ message: "Data not found!" });
    }
    await models.Scan.destroy({
      where: { UserId: userId },
    });

    return res.status(200).json({ message: "Data Deleted!" });
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

// cascading delete so all from ScanData with the FK go too
router.delete("/deleteScan/:id", async (req, res) => {
  const scanId = req.params.id;

  try {
    const data = await models.Scan.findAll({
      where: { Id: scanId },
    });

    const userid = JSON.parse(
      atob(req.headers.cookie.split("session=")[1].split(";")[0])
    ).token;

    if (!data) {
      return res.status(404).json({ message: "Data not found!" });
    }
    const jwtToken = JSON.parse(
      atob(req.headers.cookie.split("session=")[1].split(";")[0])
    );

    jwt.verify(jwtToken.token, config.secret, async (err, decoded) => {
      if (err) {
        console.log(err);
      } else {
        await models.Scan.destroy({
          where: { UserId: decoded.id, Id: scanId },
        });

        return res.status(200).json({ message: "Data Deleted!" });
      }
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

router.post("/allScans/:id", async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await models.User.findOne({
      where: { Id: userId },
    });

    if (!user) {
      return res.status(404).json({ message: "User not found!" });
    }

    const jwtToken = JSON.parse(
      atob(req.headers.cookie.split("session=")[1].split(";")[0])
    );

    jwt.verify(jwtToken.token, config.secret, async (err, decoded) => {
      if (err) {
        console.log(err);
      } else {
        const scans = await models.Scan.findAll({
          where: { UserId: userId },
        });
        if (scans.length < 1) {
          res.status(204).send(scans);
        } else {
          return res.send(scans);
        }
      }
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

router.post("/lastScan/:id", async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await models.User.findOne({
      where: { ID: userId },
    });

    if (!user) {
      return res.status(404).json({ message: "User not found!" });
    }

    const jwtToken = JSON.parse(
      atob(req.headers.cookie.split("session=")[1].split(";")[0])
    );

    jwt.verify(jwtToken.token, config.secret, async (err, decoded) => {
      if (err) {
        console.log(err);
      } else {
        const scan = await models.Scan.findOne({
          where: { UserId: userId },
          order: [
            ["id", "DESC"],
            [
              Sequelize.literal("ABS(TIMESTAMPDIFF(SECOND, ScanDate, NOW()))"),
              "ASC",
            ],
          ],
        });

        const scanData = await models.ScanData.findAll({
          where: { ScanId: scan.id },
        });

        res.status(200).send(scanData);
      }
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

router.post("/scanData/:id", (req, res) => {
  const scanId = req.params.id;

  try {
    const jwtToken = JSON.parse(
      atob(req.headers.cookie.split("session=")[1].split(";")[0])
    );

    jwt.verify(jwtToken.token, config.secret, async (err, decoded) => {
      if (err) {
        console.log(err);
        return res.status(500).json({ message: "Invalid JWT" });
      } else {
        const scanData = await models.ScanData.findAll({
          where: { ScanId: scanId },
        });
        if (scanData.length > 0) {
          return res.status(200).send(scanData);
        } else {
          return res.status(204).send(scanData);
        }
      }
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

module.exports = router;
